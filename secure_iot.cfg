/*
 * Copyright (c) 2015 Texas Instruments Incorporated.  All rights reserved.
 * Software License Agreement
 *
 * Texas Instruments (TI) is supplying this software for use solely and
 * exclusively on TI's microcontroller products. The software is owned by
 * TI and/or its suppliers, and is protected under applicable copyright
 * laws. You may not combine this software with "viral" open-source
 * software in order to form a larger program.
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
 * NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT
 * NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY
 * CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
 * DAMAGES, FOR ANY REASON WHATSOEVER.
 */

/*
 *  ======== httpsget.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Seconds = xdc.useModule('ti.sysbios.hal.Seconds');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var Event = xdc.useModule('ti.sysbios.knl.Event');

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 2048;
}

/* ================ System configuration ================ */
var SysStd = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
BIOS.heapSize = 70920;
Task.idleTaskStackSize = 768;

/* Runtime stack checking is performed */
Task.checkStackFlag = true;
Hwi.checkStackFlag = true;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ NDK configuration ================ */
var Ndk       = xdc.loadPackage('ti.ndk.config');
var Global    = xdc.useModule('ti.ndk.config.Global');
var Tcp       = xdc.useModule('ti.ndk.config.Tcp');

Global.IPv6 = false;
Global.stackLibType = Global.MIN;
Global.networkIPAddrHook = "&netIPAddrHook";

/* automatically call fdOpen/CloseSession for our sockets Task */
Global.autoOpenCloseFD = true;

Global.pktNumFrameBufs = 10;
Global.memRawPageCount = 6;
Global.ndkThreadStackSize = 1536;
Global.lowTaskStackSize = 1024;
Global.normTaskStackSize = 1024;
Global.highTaskStackSize = 1024;
Tcp.transmitBufSize = 1024;
Tcp.receiveBufSize = 1024;


/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useEMAC = true;
TIRTOS.useGPIO = true;
TIRTOS.useUART = true;

/* ================ HTTP client configuration ================ */
var Http = xdc.useModule('ti.net.http.Http');
Http.networkStack = Http.NDK;
Http.enableTLS = true;

/* ================ Command task configuration ================ */
var CommandTaskParams = new Task.Params();
CommandTaskParams.instance.name = "psCommandHandle";
CommandTaskParams.stackSize = 2048;
CommandTaskParams.priority = 1;
Program.global.psCommandHandle = Task.create("&CommandTask", CommandTaskParams);

/* ================ CommandTask Mailbox configuration ================ */
var CmdMailboxParams = new Mailbox.Params();
CmdMailboxParams.instance.name = "CmdMailbox";
CmdMailboxParams.writerEventId = 1;
Program.global.CmdMailbox = Mailbox.create(132, 3, CmdMailboxParams);
Semaphore.supportsEvents = true;

/* ================ CloudTask Mailbox configuration ================ */
var CloudMailboxParams = new Mailbox.Params();
CloudMailboxParams.instance.name = "CloudMailbox";
CloudMailboxParams.writerEventId = 1;
Program.global.CloudMailbox = Mailbox.create(132, 3, CloudMailboxParams);

